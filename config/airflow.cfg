[core]
# The home folder for airflow, default is ~/airflow
airflow_home = /usr/local/airflow

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
dags_folder = /usr/local/airflow/dags

# The folder where airflow should store its log files. This location
base_log_folder = /usr/local/airflow/logs

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor
executor = LocalExecutor

# The SqlAlchemy connection string is built from a command
sql_alchemy_conn = mysql://${CLOUDSQL_USER}:${CLOUDSQL_PASSWORD}@${CLOUDSQL_SERVICE_HOST}:${CLOUDSQL_SERVICE_PORT}/${CLOUDSQL_DB}

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool.
sql_alchemy_pool_size = 5

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite.
sql_alchemy_pool_recycle = 3600

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = 32

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = 16

# Are DAGs paused by default at creation
dags_are_paused_at_creation = True

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = 16

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_examples = False

# Where your Airflow plugins are stored
plugins_folder = /usr/local/airflow/plugins

# Whether to disable pickling dags
donot_pickle = False

# How long before timing out a python file import while filling the DagBag
dagbag_import_timeout = 30

[webserver]
# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# The time the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Secret key used to run your flask app
secret_key = temporary_key

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = sync

# Expose the configuration file in the web server
expose_config = true

# Set to true to turn on authentication : http://pythonhosted.org/airflow/installation.html#web-authentication
authenticate = False

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = False

#Add a configuration variable(default_dag_run_display_number) to control numbers of dag run for display
#https://github.com/apache/incubator-airflow/blob/master/UPDATING.md#add-a-configuration-variabledefault_dag_run_display_number-to-control-numbers-of-dag-run-for-display
default_dag_run_display_number=100

[email]
email_backend = airflow.utils.send_email_smtp

[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = 5

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = 5

# Statsd (https://github.com/etsy/statsd) integration settings
# statsd_on =  False
# statsd_host =  localhost
# statsd_port =  8125
# statsd_prefix = airflow

# The scheduler can run multiple threads in parallel to schedule dags.
# This defines how many threads will run. However airflow will never
# use more threads than the amount of cpu cores available.
max_threads = 2

# Airflow 1.10

[ldap]
# set a connection without encryption: uri = ldap://<your.ldap.server>:<port>
uri=
user_filter=
# in case of Active Directory you would use: user_name_attr = sAMAccountName
user_name_attr=
# group_member_attr should be set accordingly with *_filter
# eg :
#     group_member_attr = groupMembership
#     superuser_filter = groupMembership=CN=airflow-super-users...
group_member_attr=
superuser_filter=
data_profiler_filter=
bind_user=
bind_password=
basedn=
cacert=
# Set search_scope to one of them:  BASE, LEVEL , SUBTREE
# Set search_scope to SUBTREE if using Active Directory, and not specifying an Organizational Unit
search_scope=

[lineage]
# backend=airflow.lineage.backend.atlas
backend=

[atlas]
username=
password=
host=
port=

[kubernetes]
logs_volume_subpath=
git_repo=
git_user=
worker_container_repository=
image_pull_secrets=
git_sync_container_tag=
in_cluster=
namespace=
dags_volume_subpath=
git_sync_init_container_name=
dags_volume_claim=
git_subpath=
worker_service_account_name=
git_branch=
logs_volume_claim=
gcp_service_account_keys=
airflow_configmap=
git_sync_container_repository=
worker_container_tag=
git_password=
delete_worker_pods=
default_hive_mapred_queue=
cluster_address=
tls_cert=
tls_key=
tls_ca=
elasticsearch_host=
elasticsearch_log_id_template=
elasticsearch_end_of_log_mark=

[hive]
default_hive_mapred_queue=

[dask]
cluster_address=
tls_cert=
tls_key=
tls_ca=

[elasticsearch]
elasticsearch_host=
elasticsearch_log_id_template=
elasticsearch_end_of_log_mark=


